JAVA - 프로그래밍 언어
	프로그래밍 언어는 개발자와 운영체제가 소통하기 위한 언어이다.

프로그램
	소스코드로 잘 짜여진 틀.

	프로그램
	OS(운영체제) : 하드웨어에 적절한 전기신호를 흘려주는 역할.
	하드웨어

	- 일반 프로그램은 이식성이 좋지 않다.

	JAVA 프로그램
	JVM : JAVA 프로그램을 OS에 맞게 번역한다.
	OS(운영체제)
	하드웨어

	- JAVA 프로그램은 이식성이 좋다.

소스코드
	명령어를 작성해 놓은 것
	운영체제와 개발자가 소통할 것을 글로 작성해 놓은 것

콘솔
	사용자와 운영체제가 소통한 결과를 나타내는 창

컴파일
	사람의 언어를 컴퓨터 언어로 바꿔주는 작업

컴파일러
	컴파일을 해주는 프로그램 또는 명령어

컴파일러의 해석 방향
	위에서 아래로, 좌에서 우로 해석한다.

--------------------------------------------------------------------------------------------------------------
JVM(Java Virtual Machine)
	JAVA 프로그램을 실행해 줌.

JRE(Java Runtime Environment)
	JVM을 생성하는 부분.
	JVM을 실행할 때 필요한 라이브러리 파일들을 가지고 있다.

JDK(Java Development Kit)
	JRE 외에 개발에 필요한 도구들을 가지고 있다.
	컴파일 명령어와 실행 명령어를 담고 있다.
--------------------------------------------------------------------------------------------------------------
JDK 설치 - 11버전
	설치가 이미 되어 있는 지 확인(제어판)

	오라클 계정
	아이디 : tedhan1204@gmail.com
	비밀번호 : Asdf1234!

IDE(통합 개발 환경)
- eclipse
- IntelliJ

▷ 이클립스 설치
- https://eclipse.org/
	More > IDE and Tools > Desktop IDEs에서 eclipse 이미지 클릭
	> 우측에 있는 older versions 클릭
	> photon > R packages > 운영체제에 맞는 비트 클릭
---------------------------------------------------------------------------------------------------------
IDE 기본 설정 (Window -> Preferences)
	글꼴, 크기 설정 : Colors and Fonts > Basic > Text Font
	인코딩 : encoding 검색 > workspace 클릭 > UTF-8로 변경
=============================================================
기본 구조
	프로젝트
		패키지
			클래스(앞 글자가 대문자)
				메소드(이름 뒤에 소괄호)
					소스코드
---------------------------------------------------------------------------------------------------------
출력 메소드
	print() : 마지막에 자동으로 줄바꿈이 되지 않고 아래의 문장과 이어서 출력된다.
	println() :  마지막에 자동으로 줄바꿈이 된다.
	printf()
---------------------------------------------------------------------------------------------------------
변수 : 저장공간
	x 	= 	20
      저장공간의	대입	값(상수)
      이름		연산자

자료형(type, 종류)

자료형		type		byte		값

정수형		int		4		0, -231, 12, 2147483647, ...
실수형		float		4		1.2564864896F, -1.156F, 0.0F, 3.0F,...
		double		8		1.2564864896, -1.156, 0.0, 3.0,...
문자형		char		2		'A', '한', '1',...
문자열		String		?		"ABC", "한동석", "123", "0.0",...

변수의 선언
	자료형 변수명 = 초기값;
	자료형 변수명;

	예)
	int x = 10;
	x라는 이름의 저장공간이 만들어지고 그 안에 10이 들어간다.

RAM(메모리)
==================
OS kernel space		: 드라이버
==================
Stack			: 지역변수, 매개변수
==================
Heap			: 동적 메모리
==================
BSS			: 직접 초기화되지 않은 전역변수
==================
Data영역			: 전역 변수, 정적 변수
==================
Text영역			: 상수, 코드
==================

RAM
	int x = 10;
	x라는 이름의 저장공간이 RAM에 할당되고 10이라는 값이 들어간다.

주소(해시코드)
	int x = 10;
	x라는 이름의 저장공간이 RAM에 할당되면 고유한 값인 주소값이 부여된다.
	계속 실행되고 종료되는 프로그램이 있기 때문에, 주소값은 변경될 수 있으나
	중복은 없다.

변수의 사용
	int data = 20;	// 저장공간
	data = 30;	// 저장공간	
	System.out.print(data + 9);	// 값
	data = data + 7;	// 저장공간, 값
	data - 9;	// 값

변수 선언 시 주의사항
	같은 이름의 변수로 선언할 수 없다.
	초기화를 해준다.
	되도록 선언부에 한꺼번에 선언한다(영역 상단).


변수명 주의사항
	문자로 시작해야 한다.
	특수문자는 사용할 수 없다. 단, _는 허용한다.
	되도록 소문자만 사용한다.
	공백을 사용할 수 없다.
	good_boy : 팟홀 표기법, 언더바 표기법
	goodBoy : 카멜 표기법
	되도록 한글은 사용하지 않는다.
	명사로 사용한다.
	뜻이 있는 단어를 사용한다.
	a, b, c, d, e,....(X)
	data, number, num, age, name,....(O)

변수를 사용하는 이유
	1. 반복되는 값을 쉽게 관리할 수 있다.
	2. 의미 없는 값을 하나의 정보로 만들기 위해서 사용한다(자료구조).

서식문자(format)
	반드시 따옴표 안에서 작성해야 한다.
	
	%d	decimal(10진수 정수)
	%o	octal(8진수 정수)
	%x	hexadecimal(16진수 정수)
	%f	float(실수)
	%c	character(문자)
	%s	string(문자열)

출력 메소드
	printf() : 서식문자를 사용하여 출력할 수 있으며, 자동으로 줄바꿈되지 않는다.

출력 메소드를 사용하는 이유
	문제 발생 시 어떤 부분이 문제인지를 구체화시킬 수 있도록
	라인 별로 출력하여 알아내기 위함이다.
	사용자를 위한 도구가 아닌, 개발자를 위한 도구이다.

상수(항상 그대로인 수)
	값을 변경할 수 없도록 한다.
	final 자료형 상수명 = 값;
	단, 상수명은 전부 대문자로 약속한다.

형변환
	- 자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수
		3 + 0.0 = 3.0
		문자 + 정수 = 정수

	- 강제 형변환
		(자료형)값
		(double)3		-->	3.0

문자열 형변환
	1. 다른 자료형을 문자열로
		문자열과 다른 자료형을 연결하면 결과는 항상 문자열이 된다.

	2. 문자열을 다른 자료형으로
		일반 자료형은 일반 자료형끼리 형변환이 되고, 클래스 타입은 클래스 타입끼리 형변환이 된다.
		따라서 문자열을 정수, 실수로 변경하기 위해서는 Integer, Double 클래스의 메소드를 사용해야 한다.
----------------------------------------------------------------------------------------------------------------------------------------
입력
	커서가 깜빡이고 있는 상태.
	입력하기 전에 출력을 통해 어떤 값을 입력해야 할 지 사용자에게 알려주어야 한다.

입력 클래스
	Scanner sc = new Scanner(System.in);

입력 메소드(콘솔창에서 커서를 깜빡여 준다)
	next() : 사용자가 입력한 문자열 값
		- 사용자가 입력한 값 중 공백 또는 줄바꿈 문자를 구분점으로 각 문자열을 분리한다.
		- 첫 번째 문자열을 첫번째 next()에 담고,
	  	  두 번째 문자열은 두번째 next()에 담는다.

	nextLine() : 사용자가 입력한 문자열 값
		- 공백 또는 줄바꿈 문자도 값으로 취급하기 때문에 그대로 입력받는다.
----------------------------------------------------------------------------------------------------------------------------------------
연산자
	기능이 있는 특수문자

연산자의 우선순위
	하나의 수식에 여러 개의 연산자를 사용하면 어떤 연산이 먼저 되는 지를 구분한다.

	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

결합성
	하나의 수식에 동일한 연산자가 여러 개 사용되면 알맞은 방향으로 결합되어 연산되는 성질

비트 연산
	논리 연산자
		&	(AND, 논리곱) : A & B, 두 비트 모두 1이면 1
		|	(OR, 논리합) : A | B, 둘 중 하나라도 1이면 1
		^	(XOR, 배타논리합) : A ^ B, 두 비트가 서로 다르면 1

	단항 연산자
		~	(NOT, 논리부정) : ~A, 0은 1로 1은 0으로 변경, ~a = -a-1

	쉬프트 연산자(이동)
		<<	(LEFT SHIFT, 좌쉬프트), A << B, A를 B만큼 좌로 비트이동
		>>	(RIGHT SHIFT, 우쉬프트), A >> B, A를 B만큼 우로 비트이동

------------------------------------------------------------------------------------------------------------
논리형(boolean)
	참 : true
	거짓 : false

논리형	boolean	1byte	true, false
---------------------------------------------------------------------------------------
조건식
	결과가 참 또는 거짓, 둘 중 하나가 나오는 식

	관계 연산자
	==	: 같다
	!=	: 같지 않다
	>, <	: 초과, 미만
	>=, <=	: 이상, 이하

	논리 연산자
	&&(AND)	: A && B, 두 조건식 모두 참이면 참
	||(OR)	: A || B, 두 조건식 중 하나라도 참이면 참

	단항 연산자
	!(NOT)	: !A, 조건식 참이면 거짓으로, 거짓이면 참으로 변경
---------------------------------------------------------------------------------------
삼항 연산자( : ? ) --> 값으로 본다.
	조건식 ? 참 : 거짓
	int result = 10 > 9 ? 10 : 9;
	단, 참과 거짓 자리에 값만 작성할 수 있다.
---------------------------------------------------------------------------------------
제어문
	조건문

if문
	if(조건식){
		실행할 문장;
	}
	위 조건식에 상관없이 모두 검사
	if(조건식){
		실행할 문장;
	}
	if(조건식){
		실행할 문장;
	}

	if(조건식){
		실행할 문장;
	}
	위 조건식이 참이 아니면 검사, 참이면 모두 검사하지 않음.
	else if(조건식){
		실행할 문장;
	}...
	}else{
		실행할 문장;
	}


switch문
	switch(변수명){
	case 값1:
		실행할 문장;
		break;
	case 값2:
		실행할 문장;
		break;
	case 값3:
		실행할 문장;
		break;
	...
	default :
		실행할 문장;
		break;
	}


삼항 연산자, if문, switch문의 비교
	삼항 연산자 : 조건식이 1개 있을 경우 사용
	if문 : 조건식에 비교(>, <, >=, <=)연산자를 사용하거나, 여러 개의 조건식을 논리 연산자(&&, ||)로 연결할 때 사용
	switch문 : 하나의 변수에 여러 개의 값이 담길 수 있고, 각 값이 같은 지를 비교할 때 사용
-----------------------------------------------------------------------------------------------------------------------------------------
대입 연산자(복합 대입 연산자, 누적 연산자)
	+=, -=, /=, *=, %=,...

	int money = 10000;
	//money = money - 1000;
	money -= 1000;
	System.out.print(money);

	int data = 10;
	//data = data + 1;
	//data += 1;
	data++;
	System.out.print(data);

증감 연산자
	++, --

	전위형 : 해당 라인부터 바로 적용
		++data, --data
	후위형 : 다음 라인부터 적용
		data++, data--
-----------------------------------------------------------------------------------------------------------------------------------------
	반복문

▷ for문
	for(초기식; 조건식; 증감식){
		실행할 문장;
	}

*기타 제어문
	break : 즉시 해당 중괄호 영역을 탈출한다.
		- if문 안에서 사용 시 if문을 탈출하지 않고 if문을 감싸고 있는 중괄호 영역을 탈출한다.
	continue : 즉시 다음 반복
		- 아래의 코드를 실행하지 않기 위해서 사용한다.
--------------------------------------------------------------------------------------------------------------------------------
▷ while문
	while(조건식){
		실행할 문장;
	}

* for문과 while문의 목적
	- for : 몇 번 반복할 지 알 때
	- while : 몇 번 반복할 지 모를 때

▷ do~while문 : 최소 한 번은 무조건 실행해야 할 때
	do{
		실행할 문장;
	}while(조건식);
-----------------------------------------------------------------------------------------------------------------------------
배열 : 저장공간의 나열
	1.
	변수를 여러 개 선언하면 이름도 여러 개 생긴다. 이 때 각 저장공간을 관리하기가 불편하다.
	따라서 n칸 배열을 한 번 선언하면 저장공간도 여러 개 생기고, 이름도 한 개이기 때문에 관리하기 편하다.

	2.
	규칙성이 없는 값에 규칙성을 부여하기 위해서

배열의 선언
	자료형[] 배열명 = {값1, 값2...};	// 어떤 값을 넣을 지 알 때 사용
	자료형[] 배열명 = new 자료형[칸수];	// 어떤 값을 넣을 지는 모르나, 몇 칸 만들 지는 알 때 사용
	자료형[] 배열명 = null;		// 어떤 값을 넣을 지도 모르고, 몇 칸 만들 지도 모를 때 사용
	배열명 = new 자료형[칸수];

	※ new : Heap 메모리에 할당, 초기값으로 자동 초기화
	※ 자바에서 배열은 항상 Heap(동적 메모리)에 할당되기 때문에
	   메모리 상, 동적배열만 존재한다.

배열의 구조
	int[] arData = {7, 9, 2, 1, 4};
	
	arData라는 이름의 저장공간은 한 개 만들어지며, 여기에는 한 개의 값만 담을 수 있다.
	5개의 값을 담기 위해서는 5칸이 필요하며, 이는 Heap에 할당된다. 5칸의 저장공간 중
	첫번째 저장공간의 주소값이 arData 저장공간으로 들어가며, 다음 주소에 접근하기 위해서는
	+n을 한다. 예를 들어, arData + 2는 2라는 값이 담긴 저장소의 주소값이 되며,
	*(arData + 2)는 해당 주소에 가서 읽어온 2이라는 값이 된다. JAVA에서는 직접 주소에 접근하는
	연산자가 없기 때문에 위와 같은 식을 []로 치환하여 사용하며, arData[2]로 사용한다.
	각각의 방 번호는 index라고 부르며, 배열은 시작주소를 가지고 있기 때문에 인덱스 번호는
	항상 0부터 시작된다.

length
	배열을 선언하면 length라는 상수가 선언되고, 해당 배열의 길이가 담긴다.
	배열명.length로 사용하게 된다.


배열의 사용
	int[] arData = new int[4];	// 저장공간
	arData[0] = 10;		// 저장공간
	arData[0] + 9;		// 값
	System.out.println(arData)	// 주소값
	arData[2] = arData[0] + arData[1];	// 저장공간, 값, 값
	System.out.println(arData[4]);	// 오류
-------------------------------------------------------------------------------------------------------------
2차원 배열 : 배열 안에 배열
	1차원 배열을 여러 개 선언할 때 관리하기 힘들기 때문에
	2차원 배열을 한 번 선언한다.

	※ 2차원 이상의 배열은 메모리 낭비가 심하므로 선호하지 않는다.

2차원 배열 선언
	자료형[][] 배열명 = {{값1, 값2, 값3,...}, {값4,...}};
	자료형[][] 배열명 = new 자료형[행][열];
	자료형[][] 배열명 = null;
	배열명 = new 자료형[행][열];


       □		arrData		arrData.length(행의 길이)
      □□		arrData[행]	arrData[행].length(열의 길이)
□□□ □□□	arrData[행][열]
-----------------------------------------------------------------------------------------------------------------
메소드
	이름 뒤에 소괄호.
	단, 키워드 뒤에 소괄호는 메소드가 아니다.

	f	(x)	=	2x + 1
	메소드	매개		리턴값
	이름	변수

메소드 선언

	(1)리턴타입 (2)메소드명(자료형 (3)매개변수명,...){
		(4)실행할 문장;
		(5)return 리턴값;
	}


(1) 리턴 값이 있다면 리턴 값의 자료형을 작성하고, 리턴 값이 없다면 비워놓지 않고 void를 작성한다.
(2) 동사로 작성한다(연필(매개변수)을 쓴다(메소드)).
(3) 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다. 생략이 가능하지만
    생략 시, 외부에서 값을 전달받을 수 없게 된다.
(4) 생략이 가능하며, 메소드의 기능을 구현하는 로직을 작성한다.
(5) 생략이 가능하다.

메소드 주의사항
	메소드를 선언할 때에는 {}중괄호가 있으며, 반드시 메소드 밖에서 선언한다.
	메소드를 사용할 때에는 {}중괄호가 없으며, 반드시 메소드 안에서 사용한다.

메소드 선언 순서
문제) 두 정수의 덧셈 메소드 선언

1. 메소드 이름을 생각한다.
	add, sum, plus, hap, deohagi,...

	add(){}

2. 매개변수를 생각한다.
	add(int num1, int num2){}

3. 실행할 문장을 생각한다.
	add(int num1, int num2){
		int result = num1 + num2;
	}

4. 리턴 값을 생각한다.
	add(int num1, int num2){
		int result = num1 + num2;
		return result;
	}

5. 리턴 타입을 생각한다.
	int add(int num1, int num2){
		int result = num1 + num2;
		return result;
	}

메소드 사용
	메소드의 리턴 타입이 void가 아니라면 사용한 부분 통채로가 리턴 값이고,
	메소드의 리턴 타입이 void면 실행 메소드이므로 값으로 봐서는 절대 안된다.

--------------------------------------------------------------------------------------------------
메소드의 목적
	1. 재사용(특정성을 부여해서는 안된다).
	2. 소스코드 간결화
	3. 모듈화

리턴해야 할 때
	사용한 쪽에 로직의 결과를 전달해야 할 때.
	메소드 내에서 모든 작업이 끝날 수 없을 때.

리턴하면 안될 때
	사용한 쪽에 로직의 결과를 전달할 필요가 없을 때.
	메소드 내에서 모든 작업이 완료될 때.
---------------------------------------------------------------------------------
클래스(반)
	공통요소를 한 번만 선언해 놓고 가져다 사용만 하도록 설계한다.

	1. 타입이다.
		클래스 안에 선언된 변수와 메소드를 사용하고 싶다면,
		해당 클래스 타입으로 변수를 선언해야 한다.

	2. 주어이다.
		원숭이가 바나나를 먹는다.
		Monkey eats the banana.
		Monkey.eat("banana");
		주어     동사 목적어

클래스 선언
	class 클래스명{
		필드(변수, 메소드)
	}

클래스의 필드 사용
	1. 객체화(instance) : 객체(instance variable)를 만드는 작업, 추상적인 개념을 구체화시키는 작업.
		클래스명 객체명 = new 생성자();
		객체명.필드명
		※ .(마침표) : 하위 연산자, 멤버접근 연산자, 닷 연산자, 점 연산자
	2.

생성자
	클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 기능이 똑같지만 메소드라고 부르지 않는다.
	생성자는 리턴이라는 기능이 존재하지 않기 때문이다.

	1. 해당 클래스의 필드를 메모리에 할당한 후 부여된 주소값을 가져온다.
	2. 초기화

기본 생성자
	매개변수와 실행할 문장이 따로 없다.
	클래스 선언 시, 자동으로 선언되며, 사용자가 직접 생성자를 선언하게 되면
	선언한 생성자가 기본 생성자로 된다.

this
	필드에 접근한 객체가 누구인지 알아야 해당 필드에 접근할 수 있다.
	이 때 접근한 객체가 가지고 있는 필드의 주소값을 this라는 변수에 담을 수 있으며,
	자동으로 담기게 된다.

다형성(polymorphism)
	1. 오버로딩(Overloading)
		매개변수의 개수 또는 타입이 다르면 동일한 이름의 메소드로 선언할 수 있다.
	2.
--------------------------------------------------------------------------------------------------------------------------
유아용 게임, 모여라 셀럽동물(게임)
- 육식동물 금지

이름, 나이, 먹이, 먹이개수, 생명

1. 먹기
	먹이가 있다면,
	먹이 1 사용, 생명 1회복

2. 자기(한동석 강사) --> sleep()
	3초동안 생명 1회복

3. 산책
	생명 1 감소
	랜덤한 퀴즈를 출력하고 정답을 맞추면 먹이 2개 획득
	오답일 시 생명 1 감소
	생명이 0일 시 강제로 잠들기

4. 작별 인사하기
-----------------------------------------------------------------------------------------------------------
변수의 종류
	지역변수(local variable) : 클래스 중괄호 영역은 포함되지 않으며, 메소드 또는 그 안의 영역에서 선언된 변수
	매개변수(parameter) : 메소드의 소괄호 안에서 선언되는 변수
	전역변수(global variable) : 클래스 중괄호 영역에서 전언된 변수
	정적변수(static variable, class variable) : 객체 간 공유, 편의성

저장기억부류(Storage class)

		Stack			Data영역

		지역변수, 매개변수		전역변수, 정적변수

초기화		직접			자동
생명주기		}			new, 프로그램 종료 시
-------------------------------------------------------------------------------------------------------------------------------
상속(inheritance)
	1. 기존에 선언된 클래스의 필드를 새롭게 만들 클래스의 필드로 사용하고자 할 때
	2. 여러 클래스 선언 시 필드가 겹치는 경우, 부모 클래스를 먼저 선언하고
	   공통필드를 묶어서 자식 클래스들에게 상속해준다.

상속 문법
	class A{
		A필드
	}

	class B extends A{
		A, B필드
	}

A : 부모 클래스, 상위 클래스, 슈퍼 클래스, 기반 클래스
B : 자식 클래스, 하위 클래스, 서브 클래스, 파생 클래스

super() : 부모 생성자
	자식 클래스 타입의 객체로 부모 필드에 접근할 수 있다.
	하지만 자식 생성자만 호출하기 때문에, 자식 필드만 메모리에 할당된다고 생각할 수 있다.
	사실 자식 생성자에는 항상 부모 생성자를 호출하기 때문에 자식 생성자 호출 시
	부모와 자식 필드 모두 메모리에 할당된다.
	이 때 부모 생성자를 호출하는 방법은 super()를 사용하는 것이다.
	만약, super()를 작성하지 않더라도 컴파일러가 자동으로 작성해준다.

다형성(polymorphism)
	1. 오버로딩
	2. 오버라이딩(재정의)
	부모 필드에서 선언한 메소드를 자식 필드에서 수정하고자할 때 재정의를 해야 한다.
	이는 자식에서 부모 필드의 메소드와 동일한 이름으로 선언하는 것이다.
	부모 필드가 메모리에 먼저 할당되고 a라는 메소드가 먼저 올라간다고 하면,
	자식 필드가 메모리에 할당되면서 재정의한 a 메소드가 새롭게 만들어지는 것이 아닌
	기존에 할당된 a 메소드 저장공간에 새롭게 재정의한 소스코드의 주소가 들어가게 된다.
	따라서 자식 객체로 a 메소드에 접근하면 자식 필드에서 재정의한 소스코드의 내용이 읽히게 된다.
------------------------------------------------------------------------------------------------------------------
접근 권한 제어자(접근자)
	default : 다른 패키지에서 접근 불가
	public : 모든 곳에서 접근 가능, 대표 클래스를 의미할 때 사용
	protected : 다른 패키지에서 접근 불가, 자식은 허용
	private : 다른 클래스에서 접근 불가, 메소드로만 접근하자!(getter, setter)
----------------------------------------------------------------------------------------------------
Casting
	up casting : 자식 값을 부모 타입으로 형변환
	down casting : up casting된 객체를 자식 타입으로 형변환
	※ 부모 값을 자식 타입으로 형변환 시 오류

Casting을 사용하는 이유
	모든 자식 값을 전달받기 위해서는 동일한 타입의 저장공간으로 받아야 한다.
	하지만 자식끼리는 서로 타입이 다르기 때문에 한 번에 전달받을 수가 없다.
	이 때 up casting을 사용하면, 모든 자식이 부모 타입이므로 하나의 저장공간에
	모든 자식을 받을 수 있게 된다.
	만약 up casting으로 자식 값을 전달받았다면, 자식에서 새롭게 구현한 기능들은 사용할 수 없기 때문에
	down casting을 통해서 복구하고 사용한다.

객체 간 타입 비교
instanceof
	a instanceof A : 조건식, 참 또는 거짓 중 하나가 나오는 식
	- a 가 A 타입이면 true
	- a 가 A 타입이 아니면 false
-------------------------------------------------------------------------------------------------------------------
추상 클래스
	필드 안에 구현이 안된 메소드가 선언되어 있는 클래스를 추상 클래스라고 한다.
	이 때 구현되지 않은 메소드를 추상 메소드라고 부른다.
	반드시 재정의를 통해 구현을 해야지만 메모리에 할당되기 때문에
	"강제성"을 부여하기 위해서 추상 메소드로 선언한다.

추상 클래스 선언
	abstract class 클래스명 {
		abstract 리턴타입 메소드명(자료형 매개변수,...);
		**일반 메소드도 선언 가능
	}
======================================================================
인터페이스(interface) : 틀
	추상 클래스를 고도화 시킨 문법.
	상수와 추상메소드만 존재한다.
	구현은 인터페이스를 지정한 클래스에서 진행하고,
	인터페이스를 다른 클래스에 지정할 때에는 implements 키워드를 사용한다.
----------------------------------------------------------------------
추상 클래스와 인터페이스 간의 관계
	인터페이스를 클래스에 바로 지정하면 모든 메소드에 강제성이 부여되어서
	전부 다 구현해야 한다. 하지만 일반적인 상황에서는 모든 것이 아닌,
	필요한 메소드를 골라서 재정의해야한다.
	인터페이스를 직접 지정하지 않고 다른 클래스에 지정한 후 바디를 만들어 놓는다면,
	강제성이 소멸되고 이 클래스를 상속받아서 필드를 구현한다면, 골라서 재정의할 수 있게 된다.
	이 때 중간에서 강제성을 없애주는 클래스를 추상클래스로 선언하며, 클래스 이름 뒤에
	Adapter를 붙여서 목적을 알려준다.
----------------------------------------------------------------------
다중 상속
	여러 부모 클래스를 상속하는 것을 다중 상속이라고 한다.
	JAVA는 모호성 때문에 다중 상속을 지원하지 않는다.
	하지만 JDK8버전 부터는 인터페이스에 default 메소드 선언을 허용하며,
	여러 개를 지정할 수 있는 인터페이스 특성 상 다중상속을 지원하는 것이나 다름이 없다.

모호성(ambiguity)
	하나의 자식이 여러 부모를 상속받을 때 부모 필드에 동일한 이름의 필드가 있다면,
	어떤 부모의 필드인지 알 수가 없다. 이를 모호성이라고 부른다.

모호성 해결방법
- 상황1 : 두 개의 인터페이스 내에 같은 이름과 매개변수의 메소드가 선언되어 있다.
- 해결 : 자식 클래스에서 재정의하여 사용한다.

- 상황2 : 부모 클래스의 메소드와 인터페이스의 디폴트 메소드의 이름과 매개변수가 같다.
- 해결 : 부모 클래스의 메소드가 사용된다.
---------------------------------------------------------------------------------------
※ 인터페이스도 타입이다.
※ 인터페이스는 부모이며, 구현한 클래스가 자식이 된다.

마커 인터페이스(Marker Interface)
	클래스들을 그룹화하기 위한 목적으로 사용한다.
	인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모의 타입이므로
	마커 인터페이스를 지정받은 클래스들이 하나의 타입으로 묶이게 된다.
----------------------------------------------------------------------------------------
내부 클래스(Inner class)
	하나의 클래스에서 a작업과 b작업이 있을 때에는 따로 분리하여 클래스로 만들지 않고,
	클래스 안에 클래스를 선언하여 설계한다. 이 때 밖에 있는 클래스를 외부 클래스라고 하며,
	안에 선언된 클래스를 내부 클래스라고 한다. 외부 클래스가 메모리에 할당되어야 내부 클래스를
	객체화할 수 있기 때문에 클래스를 숨기기 위해서 내부 클래스를 사용하기도 하며,
	이를 캡슐화 또는 은닉화라고 부른다. 내부 클래스는 외부 클래스의 필드이기 때문에 외부 클래스의
	필드를 자신의 필드처럼 가져다 사용할 수 있게 된다.
	※ 메소드 안에서 클래스를 선언할 수도 있다.

익명 클래스(Anonymous inner class)
	이름이 없는 클래스이며 구현되지 않은 필드를 구현하기 위해 일회성으로 생성되는 클래스이다.
------------------------------------------------------------------------------------------------------------
함수형 인터페이스(Functional interface)
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @FunctionalInterface를 인터페이스 위에 작성하여 단 하나의 추상메소드만
	선언할 수 있도록 제한해야한다.

람다식(Lambda Expression)
	이름이 없는 메소드로서 변수처럼 사용이 가능하며, 매개변수로도 전달이 가능하다.
	함수형 인터페이스는 추상 메소드가 한 개만 선언되기 때문에 메소드 이름이 필요 없다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

람다식 문법
	1. (매개변수 형식 나열,...) -> 리턴값;
	2. (매개변수 형식 나열,...) -> {2개 이상의 문장 작성; return 리턴값;}
----------------------------------------------------------------------------------------
[실습]
함수형 인터페이스를 선언하고 이름과 성을 전달받는 추상메소드를 선언한다.
클래스를 선언하고 함수형 인터페이스를 매개변수로 받는 static 메소드를 선언한다.
외부에서 구현된 값을 전달받은 후 static 메소드에서 이름과 성을 전달하여 전체 이름을 출력하도록 구현한다.
main메소드에서는 static메소드를 사용하여 전체 이름을 출력한다.

[심화 실습]
여러 개의 정수를 입력받아서 알맞는 덧셈, 뺄셈 결과를 확인하는 애플리케이션 제작

입력 예1) 7 + 35 - 9
출력 예1) 33

입력 예2) -9 + 8 + 10
출력 예2) 9

* 사용자가 정상적으로만 입력한다는 가정 하에 구현하도록 한다.
* 두 정수를 전달받은 후 int로 리턴하는 calc 추상메소드 선언(함수형 인터페이스 제작)
* 두 정수의 덧셈, 뺄셈을 구해주는 함수형 인터페이스를 리턴하는 static 메소드 선언(람다식 리턴)
* 전체 식을 전달받은 후 String[]로 리턴하는 getOpers 추상메소드 선언(함수형 인터페이스 제작)
* main메소드에 getOper를 람다식으로 구현
* 첫번째 정수가 음수일 경우 오류 해결
---------------------------------------------------------------------------------------
예외 처리
	에러 : 심각한 오류
	예외 : 덜 심각한 오류

예외 처리 문법
	try{
		오류가 발생할 수 있는 문장

	}catch(예외이름 객체명){
		오류 발생 시 실행할 문장
	}catch(예외이름 객체명){
		오류 발생 시 실행할 문장
	}
	...
	}finally{
		오류 발생 여부에 상관없이 무조건 실행할 문장
		※외부 장치와 연결했을 경우 다시 닫을 때 주로 사용된다.
	}

예외 처리를 사용하는 이유
 - 제어문으로는 처리할 수 없는 경우
 - 프로그램이 강제종료되는 것을 막기 위함(튕김 방지)
========================================================================
API(Application Programming Interface)
	개발에 필요한 라이브러리들의 집합

- 내부 API
	JDK 설치 시 제공해주는 기본 API
	docs.oracle.com/javase

- 외부 API
	선배 개발자들이 개발한 패키지 및 클래스들을 의미한다.
	보통 JAR파일로 배포하며 자바 프로젝트에 build path에 추가하여 사용할 수 있다.

- 외부 API Build Path에 추가
	배포된 JAR파일 다운 받기
	> 프로젝트 우클릭 > Build Path > Configure Build Path
	> Libraries 탭 클릭 > Add External JARs 클릭
	> 저장된 경로의 .jar파일 더블 클릭으로 추가 > Apply 클릭
	> Orders and Exports 탭 클릭
	> Select All 클릭 > Apply and Close 클릭

API 주석(어노테이션 주석)
/**
	@
*/
----------------------------------------------------------------------------
Object 클래스
	1. toString()
		항상 객체명을 출력할 때에는 toString()이 생략되어 있다.
		toString()을 통해 출력되는 문자열이 마음에 들지 않는다면, 재정의하여 수정하도록 한다.
	2. equals() : 주소값 비교(==)
		※ String 클래스에서 값 비교로 재정의 되었다.

	3. hashCode() : 해당 객체의 주소값
	   ※ 컬렉션 프레임워크 챕터에서 재정의 목적을 이해하도록 한다.
------------------------------------------------------------------------------
Wrapper Class : 기본 자료형들의 클래스 타입
	클래스타입 객체 = new 클래스타입(일반타입의 값);	// boxing
	일반타입 변수 = 객체.000Value();		// unboxing

	JDK4 버전 이상부터는 auto를 지원한다.
	클래스타입 객체 = 일반타입의 값;		// auto boxing
	일반타입 변수 = 객체;			// auto unboxing

Wrapper Class를 사용하는 이유
	원시타입(일반타입)을 박싱하면 다양한 메소드를 제공받을 수 있다.
	여러 일반 타입을 하나의 타입으로 묶기 위해서는 반드시 클래스 타입(Wrapper Class)으로 사용해야 되고,
	이 때에는 박싱을 해주어야 한다.
--------------------------------------------------------------------------------------------------
알고리즘
	어떤 문제가 발생되었을 때 해결할 수 있는 절차 혹은 순서

자료구조
	의미 없는 데이터를 하나의 정보로 만들어주는 알고리즘들의 집합,
	수집한 자료를 저장하는 방법

컬렉션 프레임워크(Collection Framework) : 자료구조
	많은 데이터를 쉽고 효과적으로 관리할 수 있는 표준화된 방법을 제공하는 클래스들의 집합.

1. List extends Collection
- List 구현 클래스
	Vector : 용량 관리, 보안성 강화, 처리량 감소
	LinkedList : FILO으로 인해 넣을 때는 빨라도 뺄 때에는 상대적으로 느리다.
	ArrayList : 인덱스로 데이터를 관리한다.
		    컬렉션 클래스 중 실무에서 가장 많이 사용되는 클래스이다.
		    배열의 특징인 인덱스를 이용하여 값을 저장하고 관리한다.

- 배열과 ArrayList의 차이
	배열은 길이에 제한을 두어야 할 때 자주 사용되고,
	ArrayList는 몇 개의 데이터가 들어올 지 알 수 없을 때 사용한다.
--------------------------------------------------------------------------------------
Set : 집합
- 구현 클래스
	HashSet
	집합에서는 중복되는 원소를 포함할 수 없는 것 처럼 HashSet이라는 자료구조는
	중복되는 값을 무시한다.
	저장된 값들은 인덱스가 없기 때문에 순서가 없다.
	값의 유무 검사에 특화되어 있는 자료구조이고 해시코드로 유무 검사가 진행되고
	속도가 상대적으로 좋다.

- 순서 부여 : iterator()
	순서가 없는 객체에 순서를 부여하거나, 순서가 있어도 iterator 방식의 순서로
	변경하고자 할 떄 사용한다.
	hasNext()를 통해 다음 값이 있는 지 검사하고, next()를 사용하여 값을 가져온다.

Set은 검사의 목적이 있기 때문에 순서 정보를 관리할 필요가 없어서 데이터 크기에 상관없이
검색에 걸리는 시간이 매우 짧다.
반면 ArrayList는 index를 관리해야하기 때문에 상대적으로 시간이 오래 걸린다.
그러므로 기능적 차이가 없다면 Set을 사용한다.
---------------------------------------------------------------------------
Map
- 구현 클래스
	HashMap(서버 간 데이터 교환)
	Key와 Value 한 쌍으로 저장되며, 검색의 목적을 가지고 있다.
	Key는 중복된 값을 넣으면 Value가 최근 값으로 수정되고
	중복되지 않은 값을 넣으면 새롭게 추가된다.
	Value는 수정이 가능하다.
----------------------------------------------------------------------------------------
프로그램
	소스코드로 잘 짜여진 틀,
	실행이 안 된 상태

프로세스
	실행된 프로그램
	운영체제로부터 시스템 자원을 할당받는 작업의 단위
	JAVA는 운영체제가 바로 실행시켜주지 않고 JVM에 의해 실행되기 때문에
	JVM으로부터 시스템 자원을 할당받는다.

쓰레드
	프로세스 처리 경로
	멀티쓰레드를 구현할 때에는 스케줄링 작업이 필요하다.

- 단일 쓰레드
	처리 경로를 한 개만 가지고 있기 때문에 직렬적이다.
	동시에 많은 양을 처리하기 힘들기 때문에 상대적으로 비효율적이다.
	하지만 하나의 작업에 문제가 발생하더라도 다른 작업에는 영향을 끼치지 않는다.
	따라서 안정성이 보장되고 설계 시 멀티 쓰레드에 비해 쉽다.

- 멀티 쓰레드
	하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례로 처리한다.
	여러 개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다.
	설계하기 굉장히 어려우며, 하나의 쓰레드 문제 발생 시 모든 쓰레드에 문제가 발생하게 된다.
	JAVA 웹 서버가 대표적인 멀티 쓰레드이다. 멀티 쓰레드로 설계했다면, 처리량 증가, 효율성 증가,
	처리비용 감소의 장점이 있기 때문에 단점을 감수하고 설계하는 편이다.

- 멀티쓰레드의 최대 단점 : 교착상태(DeadLock)
	멀티 쓰레드 중 쓰레드 간에 대기 상태가 종료되지 않아서 무한정 대기만 하는 비정상적인 상태
	교착상태인지를 판단했다면 전체 쓰레드를 깨워주거나, 하나의 쓰레드를 종료시켜주면 교착상태가 해결된다.
-------------------------------------------------------------------------------------------------
멀티 쓰레드 구현 방법
	핵심 : run()메소드 재정의

	1. Thread 클래스 상속
	2. Runnable 인터페이스 지정
--------------------------------------------------------------------------------------
동기화(Synchronized)
	하나의 쓰레드가 자원에 접근 중일 때 다른 쓰레드가 동시에 같은 자원을
	접근하지 못하게 막는 것. 즉, 자원 공유 문제를 해결할 수 있다.

- synchronized(mutex){ ... }
	동기화 블럭이라고 부르며, 일부 소스코드만 동기화를 걸어준다.

- synchronized
	영역 전체에 동기화를 걸어주며, 메소드 리턴 타입 앞에 작성하면
	해당 메소드 전체에 동기화가 걸린다.

Thread 종료 방법
1. 필드에 boolean 타입의 변수를 선언하고 run() 안에 있는 반복문에 해당 변수가 true일 경우 break하도록 설계
2. sleep() 또는 wait(), join() 등의 메소드를 통해 쓰레드 일시정지 상태일 경우
   Thread객체.interrupt()를 사용하여 InterruptedException을 발생시킨다.
   이 때 일시정지를 시킨 메소드부분의 catch를 통해 예외를 잡아주고 원하는 문장을 작성하면 된다. 
3. 쓰레드를 일시정지 하는 코드가 없을 경우 Thread.interrupted()의 상태를 확인한다.
   Thread객체.interrupt()사용 시 Thread.interrupted()의 상태는 true로 변경되고,
   만약 Thread.interrupted()를 두 번 사용하면 두번째부터는 false상태로 리턴된다.
4. System.exit(0)를 사용하면 전체 쓰레드 종료
--------------------------------------------------------------------------------------------------------
파일 입출력(Java Application 관점)

	Writer(출력)
		BufferedWriter : 버퍼를 사용한 출력 클래스
		FileWriter : 전달한 경로의 파일을 출력하기 위한 목적으로 열어준다.
			     전달한 경로에 파일이 없다면 새롭게 만든 후 열어준다.
		File : 전달한 경로에 있는 파일의 정보를 담는 타입
		       파일의 유무 검사, 파일 삭제 등

	Reader(입력)
		BufferedReader : 버퍼를 사용한 입력 클래스
		FileReader : 전달한 경로의 파일을 입력하기 위한 목적으로 열어준다.
			     전달한 경로에 파일이 없다면 FileNotFoundException 예외가 발생한다.
		File : 전달한 경로에 있는 파일의 정보를 담는 타입
		       파일의 유무 검사, 파일 삭제 등
-----------------------------------------------------------------------------------------------------------
소프트웨어 디자인 설계 패턴
▶ MVC
M(Model) : DB에서 조회된 결과 값을 담기 위한 변수들이 선언된 클래스
	- 클래스명 뒤에 VO, DTO라는 문자를 붙여준다.
	- VO(Value Object)
	- DTO(Data Transfer Object)

V(View) : 사용자에게 보여질 화면을 구성하는 부분
	- Controller에 선언된 메소드를 사용하는 부분

C(Controller) : DB에 접근할 수 있는 메소드들이 선언된 클래스
	- 접근 후 결과 값이 있을 경우 Model 객체에 담은 후 처리
	- 클래스명 뒤에 DAO라는 문자를 붙여준다.
	- DAO(Data Access Object)
---------------------------------------------------------------------------
